cmake_minimum_required(VERSION 3.11) # FetchContent is available in 3.11+
project(Game)

file(GLOB LEVELS *.txt)
configure_file(${LEVELS} ${CMAKE_CURRENT_BINARY_DIR} COPYONLY)

configure_file("high-scores.txt" ${CMAKE_CURRENT_BINARY_DIR} COPYONLY)

#configure_file("levels/level1.txt" ${CMAKE_CURRENT_BINARY_DIR} COPYONLY)
#configure_file("levels/level2.txt" ${CMAKE_CURRENT_BINARY_DIR} COPYONLY)
#configure_file("levels/level3.txt" ${CMAKE_CURRENT_BINARY_DIR} COPYONLY)
#configure_file("levels/level4.txt" ${CMAKE_CURRENT_BINARY_DIR} COPYONLY)

configure_file("images/player-up.png" ${CMAKE_CURRENT_BINARY_DIR} COPYONLY)
configure_file("images/player-right.png" ${CMAKE_CURRENT_BINARY_DIR} COPYONLY)
configure_file("images/player-down.png" ${CMAKE_CURRENT_BINARY_DIR} COPYONLY)
configure_file("images/player-left.png" ${CMAKE_CURRENT_BINARY_DIR} COPYONLY)
configure_file("images/enemy-up.png" ${CMAKE_CURRENT_BINARY_DIR} COPYONLY)
configure_file("images/enemy-right.png" ${CMAKE_CURRENT_BINARY_DIR} COPYONLY)
configure_file("images/enemy-down.png" ${CMAKE_CURRENT_BINARY_DIR} COPYONLY)
configure_file("images/enemy-left.png" ${CMAKE_CURRENT_BINARY_DIR} COPYONLY)

# Generate compile_commands.json
set(CMAKE_EXPORT_COMPILE_COMMANDS ON)

# Dependencies
set(RAYLIB_VERSION 4.5.0)
find_package(raylib ${RAYLIB_VERSION} QUIET) # QUIET or REQUIRED
if (NOT raylib_FOUND) # If there's none, fetch and build raylib
    include(FetchContent)
    FetchContent_Declare(
            raylib
            DOWNLOAD_EXTRACT_TIMESTAMP OFF
            URL https://github.com/raysan5/raylib/archive/refs/tags/${RAYLIB_VERSION}.tar.gz
    )
    FetchContent_GetProperties(raylib)
    if (NOT raylib_POPULATED) # Have we downloaded raylib yet?
        set(FETCHCONTENT_QUIET NO)
        FetchContent_Populate(raylib)
        set(BUILD_EXAMPLES OFF CACHE BOOL "" FORCE) # don't build the supplied examples
        add_subdirectory(${raylib_SOURCE_DIR} ${raylib_BINARY_DIR})
    endif()
endif()

# Our Project
set(CMAKE_CXX_STANDARD 23)

add_executable(${PROJECT_NAME} main.cpp
        src/HighScoresWindow.cpp
        include/HighScoresWindow.h
        src/CongratulationsWindow.cpp
        include/CongratulationsWIndow.h
        include/Map.h
        src/Map.cpp
        include/Player.h
        src/Player.cpp
        src/Bullet.cpp
        include/Bullet.h
        src/Enemy.cpp
        include/Enemy.h
        src/Utils.cpp
        include/Utils.h
        include/Constants.h
        include/Constants.h)

#set(raylib_VERBOSE 1)
target_link_libraries(${PROJECT_NAME} raylib)

# Web Configurations
if (${PLATFORM} STREQUAL "Web")
    # Tell Emscripten to build an example.html file.
    set_target_properties(${PROJECT_NAME} PROPERTIES SUFFIX ".html")
endif()

# Checks if OSX and links appropriate frameworks (Only required on MacOS)
if (APPLE)
    target_link_libraries(${PROJECT_NAME} "-framework IOKit")
    target_link_libraries(${PROJECT_NAME} "-framework Cocoa")
    target_link_libraries(${PROJECT_NAME} "-framework OpenGL")
endif()
